/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface QStorageInterface extends utils.Interface {
  functions: {
    "depositItem(uint256,uint256,uint256)": FunctionFragment;
    "depositItemValidation(address,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "deposits(address,uint256,uint256,uint256)": FunctionFragment;
    "depositsAux(address,uint256,uint256,uint256)": FunctionFragment;
    "forceWithdrawItem(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "games()": FunctionFragment;
    "owner()": FunctionFragment;
    "setGlobalParams(address,address)": FunctionFragment;
    "totalItems(address)": FunctionFragment;
    "users()": FunctionFragment;
    "withdrawItem(uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdrawItemValidation(address,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositItem"
      | "depositItemValidation"
      | "deposits"
      | "depositsAux"
      | "forceWithdrawItem"
      | "games"
      | "owner"
      | "setGlobalParams"
      | "totalItems"
      | "users"
      | "withdrawItem"
      | "withdrawItemValidation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositItem",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositItemValidation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositsAux",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forceWithdrawItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "games", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGlobalParams",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalItems",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "users", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawItem",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawItemValidation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositItemValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositsAux",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceWithdrawItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalItems", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawItemValidation",
    data: BytesLike
  ): Result;

  events: {
    "ItemNotTaken(address,uint256,uint256,uint256)": EventFragment;
    "ItemNotWithdrawn(address,uint256,uint256,uint256)": EventFragment;
    "ItemTaken(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemWithdrawn(address,uint256,uint256,uint256,uint256)": EventFragment;
    "TakeItem(address,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawItem(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemNotTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawItem"): EventFragment;
}

export interface ItemNotTakenEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
}
export type ItemNotTakenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ItemNotTakenEventObject
>;

export type ItemNotTakenEventFilter = TypedEventFilter<ItemNotTakenEvent>;

export interface ItemNotWithdrawnEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
}
export type ItemNotWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ItemNotWithdrawnEventObject
>;

export type ItemNotWithdrawnEventFilter =
  TypedEventFilter<ItemNotWithdrawnEvent>;

export interface ItemTakenEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  position: BigNumber;
}
export type ItemTakenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemTakenEventObject
>;

export type ItemTakenEventFilter = TypedEventFilter<ItemTakenEvent>;

export interface ItemWithdrawnEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  position: BigNumber;
}
export type ItemWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemWithdrawnEventObject
>;

export type ItemWithdrawnEventFilter = TypedEventFilter<ItemWithdrawnEvent>;

export interface TakeItemEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  position: BigNumber;
}
export type TakeItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  TakeItemEventObject
>;

export type TakeItemEventFilter = TypedEventFilter<TakeItemEvent>;

export interface WithdrawItemEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  position: BigNumber;
}
export type WithdrawItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  WithdrawItemEventObject
>;

export type WithdrawItemEventFilter = TypedEventFilter<WithdrawItemEvent>;

export interface QStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositItem(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositItemValidation(
      depositOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositsAux(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    forceWithdrawItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    games(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalItems(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    users(overrides?: CallOverrides): Promise<[string]>;

    withdrawItem(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawItemValidation(
      depositOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  depositItem(
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositItemValidation(
    depositOwner: PromiseOrValue<string>,
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    itemPosition: PromiseOrValue<BigNumberish>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositsAux(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  forceWithdrawItem(
    user: PromiseOrValue<string>,
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    itemPosition: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  games(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setGlobalParams(
    busers: PromiseOrValue<string>,
    bgames: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalItems(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  users(overrides?: CallOverrides): Promise<string>;

  withdrawItem(
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    itemPosition: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawItemValidation(
    depositOwner: PromiseOrValue<string>,
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    itemPosition: PromiseOrValue<BigNumberish>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositItem(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositItemValidation(
      depositOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositsAux(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceWithdrawItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    games(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalItems(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(overrides?: CallOverrides): Promise<string>;

    withdrawItem(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawItemValidation(
      depositOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemNotTaken(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenEventFilter;
    ItemNotTaken(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenEventFilter;

    "ItemNotWithdrawn(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null
    ): ItemNotWithdrawnEventFilter;
    ItemNotWithdrawn(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null
    ): ItemNotWithdrawnEventFilter;

    "ItemTaken(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null,
      position?: null
    ): ItemTakenEventFilter;
    ItemTaken(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null,
      position?: null
    ): ItemTakenEventFilter;

    "ItemWithdrawn(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null,
      position?: null
    ): ItemWithdrawnEventFilter;
    ItemWithdrawn(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null,
      position?: null
    ): ItemWithdrawnEventFilter;

    "TakeItem(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null,
      position?: null
    ): TakeItemEventFilter;
    TakeItem(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null,
      position?: null
    ): TakeItemEventFilter;

    "WithdrawItem(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null,
      position?: null
    ): WithdrawItemEventFilter;
    WithdrawItem(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: PromiseOrValue<BigNumberish> | null,
      position?: null
    ): WithdrawItemEventFilter;
  };

  estimateGas: {
    depositItem(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositItemValidation(
      depositOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositsAux(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceWithdrawItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    games(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalItems(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawItem(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawItemValidation(
      depositOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositItem(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositItemValidation(
      depositOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositsAux(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceWithdrawItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    games(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalItems(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    users(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawItem(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawItemValidation(
      depositOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      itemPosition: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
