/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface QExchangesInterface extends utils.Interface {
  functions: {
    "cancelExchange(uint256)": FunctionFragment;
    "createExchange(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "exchangeCancelled(uint256,bool)": FunctionFragment;
    "exchangeProof(uint256,address)": FunctionFragment;
    "exchanges(uint256)": FunctionFragment;
    "games()": FunctionFragment;
    "id()": FunctionFragment;
    "itemGiven(uint256,address,bool)": FunctionFragment;
    "itemTakenClient(uint256,address,bool)": FunctionFragment;
    "itemTakenOwner(uint256,bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "setGlobalParams(address)": FunctionFragment;
    "triggerExchange(uint256)": FunctionFragment;
    "validateExchangeClient(uint256,address,bool)": FunctionFragment;
    "validateExchangeOwner(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelExchange"
      | "createExchange"
      | "exchangeCancelled"
      | "exchangeProof"
      | "exchanges"
      | "games"
      | "id"
      | "itemGiven"
      | "itemTakenClient"
      | "itemTakenOwner"
      | "owner"
      | "setGlobalParams"
      | "triggerExchange"
      | "validateExchangeClient"
      | "validateExchangeOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelExchange",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createExchange",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeCancelled",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeProof",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchanges",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "games", values?: undefined): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "itemGiven",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "itemTakenClient",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "itemTakenOwner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGlobalParams",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerExchange",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateExchangeClient",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateExchangeOwner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchanges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemGiven", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "itemTakenClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemTakenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateExchangeClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateExchangeOwner",
    data: BytesLike
  ): Result;

  events: {
    "ClientNotValidated(address,uint256,uint256)": EventFragment;
    "ClientValidated(address,uint256,uint256,uint256,uint256)": EventFragment;
    "GiveItemClient(address,uint256,uint256,uint256,uint256)": EventFragment;
    "GiveItemOwner(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemGivenClient(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemGivenOwner(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemNotGivenClient(address,uint256,uint256)": EventFragment;
    "ItemNotGivenOwner(address,uint256,uint256)": EventFragment;
    "ItemNotRefunded(address,uint256,uint256)": EventFragment;
    "ItemNotTakenClient(address,uint256,uint256)": EventFragment;
    "ItemNotTakenOwner(address,uint256,uint256)": EventFragment;
    "ItemRefunded(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemTakenClient(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemTakenOwner(address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnerNotValidated(address,uint256,uint256)": EventFragment;
    "OwnerValidated(address,uint256,uint256,uint256,uint256)": EventFragment;
    "RefundItem(address,uint256,uint256,uint256,uint256)": EventFragment;
    "TakeItemClient(address,uint256,uint256,uint256,uint256)": EventFragment;
    "TakeItemOwner(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ValidateClient(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ValidateOwner(address,uint256,uint256,uint256,uint256,uint256[3])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClientNotValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClientValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GiveItemClient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GiveItemOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemGivenClient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemGivenOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotGivenClient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotGivenOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotTakenClient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotTakenOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemTakenClient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemTakenOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNotValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeItemClient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeItemOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidateClient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidateOwner"): EventFragment;
}

export interface ClientNotValidatedEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ClientNotValidatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClientNotValidatedEventObject
>;

export type ClientNotValidatedEventFilter =
  TypedEventFilter<ClientNotValidatedEvent>;

export interface ClientValidatedEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ClientValidatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ClientValidatedEventObject
>;

export type ClientValidatedEventFilter = TypedEventFilter<ClientValidatedEvent>;

export interface GiveItemClientEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type GiveItemClientEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  GiveItemClientEventObject
>;

export type GiveItemClientEventFilter = TypedEventFilter<GiveItemClientEvent>;

export interface GiveItemOwnerEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type GiveItemOwnerEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  GiveItemOwnerEventObject
>;

export type GiveItemOwnerEventFilter = TypedEventFilter<GiveItemOwnerEvent>;

export interface ItemGivenClientEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
  status: BigNumber;
}
export type ItemGivenClientEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemGivenClientEventObject
>;

export type ItemGivenClientEventFilter = TypedEventFilter<ItemGivenClientEvent>;

export interface ItemGivenOwnerEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
  status: BigNumber;
}
export type ItemGivenOwnerEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemGivenOwnerEventObject
>;

export type ItemGivenOwnerEventFilter = TypedEventFilter<ItemGivenOwnerEvent>;

export interface ItemNotGivenClientEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotGivenClientEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotGivenClientEventObject
>;

export type ItemNotGivenClientEventFilter =
  TypedEventFilter<ItemNotGivenClientEvent>;

export interface ItemNotGivenOwnerEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotGivenOwnerEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotGivenOwnerEventObject
>;

export type ItemNotGivenOwnerEventFilter =
  TypedEventFilter<ItemNotGivenOwnerEvent>;

export interface ItemNotRefundedEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotRefundedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotRefundedEventObject
>;

export type ItemNotRefundedEventFilter = TypedEventFilter<ItemNotRefundedEvent>;

export interface ItemNotTakenClientEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotTakenClientEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotTakenClientEventObject
>;

export type ItemNotTakenClientEventFilter =
  TypedEventFilter<ItemNotTakenClientEvent>;

export interface ItemNotTakenOwnerEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotTakenOwnerEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotTakenOwnerEventObject
>;

export type ItemNotTakenOwnerEventFilter =
  TypedEventFilter<ItemNotTakenOwnerEvent>;

export interface ItemRefundedEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ItemRefundedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemRefundedEventObject
>;

export type ItemRefundedEventFilter = TypedEventFilter<ItemRefundedEvent>;

export interface ItemTakenClientEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ItemTakenClientEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemTakenClientEventObject
>;

export type ItemTakenClientEventFilter = TypedEventFilter<ItemTakenClientEvent>;

export interface ItemTakenOwnerEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ItemTakenOwnerEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemTakenOwnerEventObject
>;

export type ItemTakenOwnerEventFilter = TypedEventFilter<ItemTakenOwnerEvent>;

export interface OwnerNotValidatedEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type OwnerNotValidatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OwnerNotValidatedEventObject
>;

export type OwnerNotValidatedEventFilter =
  TypedEventFilter<OwnerNotValidatedEvent>;

export interface OwnerValidatedEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type OwnerValidatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  OwnerValidatedEventObject
>;

export type OwnerValidatedEventFilter = TypedEventFilter<OwnerValidatedEvent>;

export interface RefundItemEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type RefundItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RefundItemEventObject
>;

export type RefundItemEventFilter = TypedEventFilter<RefundItemEvent>;

export interface TakeItemClientEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type TakeItemClientEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  TakeItemClientEventObject
>;

export type TakeItemClientEventFilter = TypedEventFilter<TakeItemClientEvent>;

export interface TakeItemOwnerEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type TakeItemOwnerEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  TakeItemOwnerEventObject
>;

export type TakeItemOwnerEventFilter = TypedEventFilter<TakeItemOwnerEvent>;

export interface ValidateClientEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ValidateClientEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ValidateClientEventObject
>;

export type ValidateClientEventFilter = TypedEventFilter<ValidateClientEvent>;

export interface ValidateOwnerEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
  metadata: [BigNumber, BigNumber, BigNumber];
}
export type ValidateOwnerEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber]
  ],
  ValidateOwnerEventObject
>;

export type ValidateOwnerEventFilter = TypedEventFilter<ValidateOwnerEvent>;

export interface QExchanges extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QExchangesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelExchange(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createExchange(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      askedGame: PromiseOrValue<BigNumberish>,
      askedItem: PromiseOrValue<BigNumberish>,
      askedServer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeCancelled(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeProof(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    exchanges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        owner: string;
        client: string;
        game: BigNumber;
        item: BigNumber;
        server: BigNumber;
        gameTo: BigNumber;
        itemTo: BigNumber;
        serverTo: BigNumber;
        status: number;
      }
    >;

    games(overrides?: CallOverrides): Promise<[string]>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    itemGiven(
      _id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    itemTakenClient(
      _id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    itemTakenOwner(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setGlobalParams(
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    triggerExchange(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateExchangeClient(
      _id: PromiseOrValue<BigNumberish>,
      client: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateExchangeOwner(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelExchange(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createExchange(
    game: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    askedGame: PromiseOrValue<BigNumberish>,
    askedItem: PromiseOrValue<BigNumberish>,
    askedServer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeCancelled(
    _id: PromiseOrValue<BigNumberish>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeProof(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  exchanges(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      owner: string;
      client: string;
      game: BigNumber;
      item: BigNumber;
      server: BigNumber;
      gameTo: BigNumber;
      itemTo: BigNumber;
      serverTo: BigNumber;
      status: number;
    }
  >;

  games(overrides?: CallOverrides): Promise<string>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  itemGiven(
    _id: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  itemTakenClient(
    _id: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  itemTakenOwner(
    _id: PromiseOrValue<BigNumberish>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  setGlobalParams(
    bgames: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  triggerExchange(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateExchangeClient(
    _id: PromiseOrValue<BigNumberish>,
    client: PromiseOrValue<string>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateExchangeOwner(
    _id: PromiseOrValue<BigNumberish>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelExchange(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createExchange(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      askedGame: PromiseOrValue<BigNumberish>,
      askedItem: PromiseOrValue<BigNumberish>,
      askedServer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeCancelled(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeProof(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exchanges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        owner: string;
        client: string;
        game: BigNumber;
        item: BigNumber;
        server: BigNumber;
        gameTo: BigNumber;
        itemTo: BigNumber;
        serverTo: BigNumber;
        status: number;
      }
    >;

    games(overrides?: CallOverrides): Promise<string>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    itemGiven(
      _id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    itemTakenClient(
      _id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    itemTakenOwner(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    setGlobalParams(
      bgames: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerExchange(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateExchangeClient(
      _id: PromiseOrValue<BigNumberish>,
      client: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateExchangeOwner(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClientNotValidated(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ClientNotValidatedEventFilter;
    ClientNotValidated(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ClientNotValidatedEventFilter;

    "ClientValidated(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ClientValidatedEventFilter;
    ClientValidated(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ClientValidatedEventFilter;

    "GiveItemClient(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): GiveItemClientEventFilter;
    GiveItemClient(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): GiveItemClientEventFilter;

    "GiveItemOwner(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): GiveItemOwnerEventFilter;
    GiveItemOwner(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): GiveItemOwnerEventFilter;

    "ItemGivenClient(address,uint256,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): ItemGivenClientEventFilter;
    ItemGivenClient(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): ItemGivenClientEventFilter;

    "ItemGivenOwner(address,uint256,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): ItemGivenOwnerEventFilter;
    ItemGivenOwner(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): ItemGivenOwnerEventFilter;

    "ItemNotGivenClient(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotGivenClientEventFilter;
    ItemNotGivenClient(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotGivenClientEventFilter;

    "ItemNotGivenOwner(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotGivenOwnerEventFilter;
    ItemNotGivenOwner(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotGivenOwnerEventFilter;

    "ItemNotRefunded(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotRefundedEventFilter;
    ItemNotRefunded(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotRefundedEventFilter;

    "ItemNotTakenClient(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenClientEventFilter;
    ItemNotTakenClient(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenClientEventFilter;

    "ItemNotTakenOwner(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenOwnerEventFilter;
    ItemNotTakenOwner(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenOwnerEventFilter;

    "ItemRefunded(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemRefundedEventFilter;
    ItemRefunded(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemRefundedEventFilter;

    "ItemTakenClient(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenClientEventFilter;
    ItemTakenClient(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenClientEventFilter;

    "ItemTakenOwner(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenOwnerEventFilter;
    ItemTakenOwner(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenOwnerEventFilter;

    "OwnerNotValidated(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): OwnerNotValidatedEventFilter;
    OwnerNotValidated(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): OwnerNotValidatedEventFilter;

    "OwnerValidated(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): OwnerValidatedEventFilter;
    OwnerValidated(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): OwnerValidatedEventFilter;

    "RefundItem(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): RefundItemEventFilter;
    RefundItem(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): RefundItemEventFilter;

    "TakeItemClient(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TakeItemClientEventFilter;
    TakeItemClient(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TakeItemClientEventFilter;

    "TakeItemOwner(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TakeItemOwnerEventFilter;
    TakeItemOwner(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TakeItemOwnerEventFilter;

    "ValidateClient(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ValidateClientEventFilter;
    ValidateClient(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ValidateClientEventFilter;

    "ValidateOwner(address,uint256,uint256,uint256,uint256,uint256[3])"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      metadata?: null
    ): ValidateOwnerEventFilter;
    ValidateOwner(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      metadata?: null
    ): ValidateOwnerEventFilter;
  };

  estimateGas: {
    cancelExchange(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createExchange(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      askedGame: PromiseOrValue<BigNumberish>,
      askedItem: PromiseOrValue<BigNumberish>,
      askedServer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeCancelled(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeProof(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchanges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    games(overrides?: CallOverrides): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    itemGiven(
      _id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    itemTakenClient(
      _id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    itemTakenOwner(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setGlobalParams(
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    triggerExchange(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateExchangeClient(
      _id: PromiseOrValue<BigNumberish>,
      client: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateExchangeOwner(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelExchange(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createExchange(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      askedGame: PromiseOrValue<BigNumberish>,
      askedItem: PromiseOrValue<BigNumberish>,
      askedServer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeCancelled(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeProof(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchanges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    games(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itemGiven(
      _id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    itemTakenClient(
      _id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    itemTakenOwner(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGlobalParams(
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    triggerExchange(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateExchangeClient(
      _id: PromiseOrValue<BigNumberish>,
      client: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateExchangeOwner(
      _id: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
