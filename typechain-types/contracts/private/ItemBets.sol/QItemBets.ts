/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface QItemBetsInterface extends utils.Interface {
  functions: {
    "acceptBetOffert(uint256,bool)": FunctionFragment;
    "cancelItemsBet(uint256)": FunctionFragment;
    "finishBet(uint256,uint256[2],uint256)": FunctionFragment;
    "games()": FunctionFragment;
    "id()": FunctionFragment;
    "itemsBet(uint256)": FunctionFragment;
    "opponentBetConfirmation(uint256,bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerBetConfirmation(uint256,bool)": FunctionFragment;
    "playTheBet(uint256,uint256,uint256,uint256,uint256[2],uint256)": FunctionFragment;
    "setGlobalParams(address)": FunctionFragment;
    "setPlayerItemRefunded(uint256,uint256,uint256,uint256,address,bool)": FunctionFragment;
    "setPlayerReceivedItem(uint256,uint256,uint256,uint256,address,bool)": FunctionFragment;
    "startItemsBet(uint256,uint256,uint256,uint256,uint256,uint256[2],uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptBetOffert"
      | "cancelItemsBet"
      | "finishBet"
      | "games"
      | "id"
      | "itemsBet"
      | "opponentBetConfirmation"
      | "owner"
      | "ownerBetConfirmation"
      | "playTheBet"
      | "setGlobalParams"
      | "setPlayerItemRefunded"
      | "setPlayerReceivedItem"
      | "startItemsBet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptBetOffert",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelItemsBet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finishBet",
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "games", values?: undefined): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "itemsBet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "opponentBetConfirmation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerBetConfirmation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "playTheBet",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalParams",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlayerItemRefunded",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlayerReceivedItem",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startItemsBet",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBetOffert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelItemsBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finishBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemsBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "opponentBetConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerBetConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playTheBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlayerItemRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlayerReceivedItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startItemsBet",
    data: BytesLike
  ): Result;

  events: {
    "GiveItem(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemGiven(address,uint256,uint256,uint256,uint256,uint8)": EventFragment;
    "ItemNotGiven(address,uint256,uint256)": EventFragment;
    "ItemNotRefunded(address,uint256,uint256)": EventFragment;
    "ItemNotTakenOpponent(address,uint256,uint256)": EventFragment;
    "ItemNotTakenOwner(address,uint256,uint256)": EventFragment;
    "ItemRefunded(address,uint256,uint256,uint256,uint256,uint8)": EventFragment;
    "ItemTakenOpponent(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemTakenOwner(address,uint256,uint256,uint256,uint256)": EventFragment;
    "OpponentBetAccepted(address,uint256,uint256)": EventFragment;
    "RefundItem(address,uint256,uint256,uint256,uint256)": EventFragment;
    "TakeItemOpponent(address,uint256,uint256,uint256,uint256,uint256[2],uint256)": EventFragment;
    "TakeItemOwner(address,uint256,uint256,uint256,uint256,uint256,uint256[2],uint256,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GiveItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemGiven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotGiven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotTakenOpponent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotTakenOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemTakenOpponent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemTakenOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpponentBetAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeItemOpponent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeItemOwner"): EventFragment;
}

export interface GiveItemEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type GiveItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  GiveItemEventObject
>;

export type GiveItemEventFilter = TypedEventFilter<GiveItemEvent>;

export interface ItemGivenEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
  status: number;
}
export type ItemGivenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, number],
  ItemGivenEventObject
>;

export type ItemGivenEventFilter = TypedEventFilter<ItemGivenEvent>;

export interface ItemNotGivenEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotGivenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotGivenEventObject
>;

export type ItemNotGivenEventFilter = TypedEventFilter<ItemNotGivenEvent>;

export interface ItemNotRefundedEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotRefundedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotRefundedEventObject
>;

export type ItemNotRefundedEventFilter = TypedEventFilter<ItemNotRefundedEvent>;

export interface ItemNotTakenOpponentEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotTakenOpponentEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotTakenOpponentEventObject
>;

export type ItemNotTakenOpponentEventFilter =
  TypedEventFilter<ItemNotTakenOpponentEvent>;

export interface ItemNotTakenOwnerEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotTakenOwnerEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotTakenOwnerEventObject
>;

export type ItemNotTakenOwnerEventFilter =
  TypedEventFilter<ItemNotTakenOwnerEvent>;

export interface ItemRefundedEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
  status: number;
}
export type ItemRefundedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, number],
  ItemRefundedEventObject
>;

export type ItemRefundedEventFilter = TypedEventFilter<ItemRefundedEvent>;

export interface ItemTakenOpponentEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ItemTakenOpponentEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemTakenOpponentEventObject
>;

export type ItemTakenOpponentEventFilter =
  TypedEventFilter<ItemTakenOpponentEvent>;

export interface ItemTakenOwnerEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ItemTakenOwnerEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemTakenOwnerEventObject
>;

export type ItemTakenOwnerEventFilter = TypedEventFilter<ItemTakenOwnerEvent>;

export interface OpponentBetAcceptedEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type OpponentBetAcceptedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OpponentBetAcceptedEventObject
>;

export type OpponentBetAcceptedEventFilter =
  TypedEventFilter<OpponentBetAcceptedEvent>;

export interface RefundItemEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type RefundItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RefundItemEventObject
>;

export type RefundItemEventFilter = TypedEventFilter<RefundItemEvent>;

export interface TakeItemOpponentEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
  score: [BigNumber, BigNumber];
  status: BigNumber;
}
export type TakeItemOpponentEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber],
    BigNumber
  ],
  TakeItemOpponentEventObject
>;

export type TakeItemOpponentEventFilter =
  TypedEventFilter<TakeItemOpponentEvent>;

export interface TakeItemOwnerEventObject {
  user: string;
  theMatch: BigNumber;
  theGameOfMatch: BigNumber;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  score: [BigNumber, BigNumber];
  status: BigNumber;
  forScore: boolean;
  id: BigNumber;
}
export type TakeItemOwnerEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber],
    BigNumber,
    boolean,
    BigNumber
  ],
  TakeItemOwnerEventObject
>;

export type TakeItemOwnerEventFilter = TypedEventFilter<TakeItemOwnerEvent>;

export interface QItemBets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QItemBetsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptBetOffert(
      bet: PromiseOrValue<BigNumberish>,
      gamerValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelItemsBet(
      bet: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finishBet(
      bet: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    games(overrides?: CallOverrides): Promise<[string]>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    itemsBet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, boolean, number] & {
        owner: string;
        opponent: string;
        winner: string;
        theMatch: BigNumber;
        game: BigNumber;
        forScore: boolean;
        status: number;
      }
    >;

    opponentBetConfirmation(
      bet: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerBetConfirmation(
      bet: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playTheBet(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlobalParams(
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlayerItemRefunded(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlayerReceivedItem(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startItemsBet(
      theMatch: PromiseOrValue<BigNumberish>,
      gameOfMatch: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      forScore: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBetOffert(
    bet: PromiseOrValue<BigNumberish>,
    gamerValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelItemsBet(
    bet: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finishBet(
    bet: PromiseOrValue<BigNumberish>,
    score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  games(overrides?: CallOverrides): Promise<string>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  itemsBet(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, boolean, number] & {
      owner: string;
      opponent: string;
      winner: string;
      theMatch: BigNumber;
      game: BigNumber;
      forScore: boolean;
      status: number;
    }
  >;

  opponentBetConfirmation(
    bet: PromiseOrValue<BigNumberish>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerBetConfirmation(
    bet: PromiseOrValue<BigNumberish>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playTheBet(
    bet: PromiseOrValue<BigNumberish>,
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlobalParams(
    bgames: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlayerItemRefunded(
    bet: PromiseOrValue<BigNumberish>,
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    player: PromiseOrValue<string>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlayerReceivedItem(
    bet: PromiseOrValue<BigNumberish>,
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    player: PromiseOrValue<string>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startItemsBet(
    theMatch: PromiseOrValue<BigNumberish>,
    gameOfMatch: PromiseOrValue<BigNumberish>,
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    status: PromiseOrValue<BigNumberish>,
    forScore: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBetOffert(
      bet: PromiseOrValue<BigNumberish>,
      gamerValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelItemsBet(
      bet: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finishBet(
      bet: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    games(overrides?: CallOverrides): Promise<string>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    itemsBet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, boolean, number] & {
        owner: string;
        opponent: string;
        winner: string;
        theMatch: BigNumber;
        game: BigNumber;
        forScore: boolean;
        status: number;
      }
    >;

    opponentBetConfirmation(
      bet: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerBetConfirmation(
      bet: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    playTheBet(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalParams(
      bgames: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlayerItemRefunded(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlayerReceivedItem(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    startItemsBet(
      theMatch: PromiseOrValue<BigNumberish>,
      gameOfMatch: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      forScore: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GiveItem(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): GiveItemEventFilter;
    GiveItem(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): GiveItemEventFilter;

    "ItemGiven(address,uint256,uint256,uint256,uint256,uint8)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): ItemGivenEventFilter;
    ItemGiven(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): ItemGivenEventFilter;

    "ItemNotGiven(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotGivenEventFilter;
    ItemNotGiven(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotGivenEventFilter;

    "ItemNotRefunded(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotRefundedEventFilter;
    ItemNotRefunded(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotRefundedEventFilter;

    "ItemNotTakenOpponent(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenOpponentEventFilter;
    ItemNotTakenOpponent(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenOpponentEventFilter;

    "ItemNotTakenOwner(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenOwnerEventFilter;
    ItemNotTakenOwner(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenOwnerEventFilter;

    "ItemRefunded(address,uint256,uint256,uint256,uint256,uint8)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): ItemRefundedEventFilter;
    ItemRefunded(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): ItemRefundedEventFilter;

    "ItemTakenOpponent(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenOpponentEventFilter;
    ItemTakenOpponent(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenOpponentEventFilter;

    "ItemTakenOwner(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenOwnerEventFilter;
    ItemTakenOwner(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenOwnerEventFilter;

    "OpponentBetAccepted(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): OpponentBetAcceptedEventFilter;
    OpponentBetAccepted(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): OpponentBetAcceptedEventFilter;

    "RefundItem(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): RefundItemEventFilter;
    RefundItem(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): RefundItemEventFilter;

    "TakeItemOpponent(address,uint256,uint256,uint256,uint256,uint256[2],uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      score?: null,
      status?: null
    ): TakeItemOpponentEventFilter;
    TakeItemOpponent(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      score?: null,
      status?: null
    ): TakeItemOpponentEventFilter;

    "TakeItemOwner(address,uint256,uint256,uint256,uint256,uint256,uint256[2],uint256,bool,uint256)"(
      user?: PromiseOrValue<string> | null,
      theMatch?: null,
      theGameOfMatch?: null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      score?: null,
      status?: null,
      forScore?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TakeItemOwnerEventFilter;
    TakeItemOwner(
      user?: PromiseOrValue<string> | null,
      theMatch?: null,
      theGameOfMatch?: null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      score?: null,
      status?: null,
      forScore?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TakeItemOwnerEventFilter;
  };

  estimateGas: {
    acceptBetOffert(
      bet: PromiseOrValue<BigNumberish>,
      gamerValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelItemsBet(
      bet: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finishBet(
      bet: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    games(overrides?: CallOverrides): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    itemsBet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    opponentBetConfirmation(
      bet: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerBetConfirmation(
      bet: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playTheBet(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlobalParams(
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlayerItemRefunded(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlayerReceivedItem(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startItemsBet(
      theMatch: PromiseOrValue<BigNumberish>,
      gameOfMatch: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      forScore: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBetOffert(
      bet: PromiseOrValue<BigNumberish>,
      gamerValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelItemsBet(
      bet: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finishBet(
      bet: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    games(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itemsBet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    opponentBetConfirmation(
      bet: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerBetConfirmation(
      bet: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playTheBet(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalParams(
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlayerItemRefunded(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlayerReceivedItem(
      bet: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startItemsBet(
      theMatch: PromiseOrValue<BigNumberish>,
      gameOfMatch: PromiseOrValue<BigNumberish>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      score: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      status: PromiseOrValue<BigNumberish>,
      forScore: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
