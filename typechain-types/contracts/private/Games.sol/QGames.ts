/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace QGames {
  export type AuthenticationStruct = {
    user: PromiseOrValue<string>;
    game: PromiseOrValue<BigNumberish>;
    username: PromiseOrValue<string>;
    password: PromiseOrValue<string>;
    server: PromiseOrValue<BigNumberish>;
    email: PromiseOrValue<string>;
    ign: PromiseOrValue<string>;
  };

  export type AuthenticationStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string
  ] & {
    user: string;
    game: BigNumber;
    username: string;
    password: string;
    server: BigNumber;
    email: string;
    ign: string;
  };
}

export interface QGamesInterface extends utils.Interface {
  functions: {
    "acceptAffiliation(uint256,uint256)": FunctionFragment;
    "addCompanyItems(uint256,uint256[])": FunctionFragment;
    "addGameItems(uint256,uint256[])": FunctionFragment;
    "addGameServers(uint256,uint256[])": FunctionFragment;
    "authenticate((address,uint256,string,string,uint256,string,string))": FunctionFragment;
    "authenticated((address,uint256,string,string,uint256,string,string),bool)": FunctionFragment;
    "changeGameStatus(uint256)": FunctionFragment;
    "checkCompany(address,uint256,uint256,uint256)": FunctionFragment;
    "checkGameAffiliation(uint256,uint256)": FunctionFragment;
    "checkGameOwner(address,uint256)": FunctionFragment;
    "checkGameServerCompanyItem(address,uint256,uint256,uint256)": FunctionFragment;
    "checkGameServerItem(address,uint256,uint256,uint256)": FunctionFragment;
    "checkUser(address,uint256,uint256,uint256)": FunctionFragment;
    "companyItemOf(uint256,uint256)": FunctionFragment;
    "configNewGame()": FunctionFragment;
    "gameAllowed(uint256,uint256)": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "getFees(uint256)": FunctionFragment;
    "getGameOnMarketStatus(uint256)": FunctionFragment;
    "getGameOwner(uint256)": FunctionFragment;
    "id()": FunctionFragment;
    "itemOf(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "permission(uint256,address)": FunctionFragment;
    "playingOnServer(uint256,uint256)": FunctionFragment;
    "requestAffiliateGame(uint256,uint256)": FunctionFragment;
    "requestsToJoinGame(address,uint256,uint256)": FunctionFragment;
    "serverOf(uint256,uint256)": FunctionFragment;
    "setFees(uint256,address,uint256[2])": FunctionFragment;
    "setGameTwoFactorAuth(uint256)": FunctionFragment;
    "setGlobalParams(address)": FunctionFragment;
    "setPermission(uint256,address,bool)": FunctionFragment;
    "setPermissions(uint256,address[],bool[])": FunctionFragment;
    "twoFactorAuthenticate(uint256,uint256,string)": FunctionFragment;
    "twoFactorAuthenticated((address,uint256,string,string,uint256,string,string),bool)": FunctionFragment;
    "users()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptAffiliation"
      | "addCompanyItems"
      | "addGameItems"
      | "addGameServers"
      | "authenticate"
      | "authenticated"
      | "changeGameStatus"
      | "checkCompany"
      | "checkGameAffiliation"
      | "checkGameOwner"
      | "checkGameServerCompanyItem"
      | "checkGameServerItem"
      | "checkUser"
      | "companyItemOf"
      | "configNewGame"
      | "gameAllowed"
      | "games"
      | "getFees"
      | "getGameOnMarketStatus"
      | "getGameOwner"
      | "id"
      | "itemOf"
      | "owner"
      | "permission"
      | "playingOnServer"
      | "requestAffiliateGame"
      | "requestsToJoinGame"
      | "serverOf"
      | "setFees"
      | "setGameTwoFactorAuth"
      | "setGlobalParams"
      | "setPermission"
      | "setPermissions"
      | "twoFactorAuthenticate"
      | "twoFactorAuthenticated"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptAffiliation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addCompanyItems",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addGameItems",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addGameServers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "authenticate",
    values: [QGames.AuthenticationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "authenticated",
    values: [QGames.AuthenticationStruct, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGameStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCompany",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkGameAffiliation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkGameOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkGameServerCompanyItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkGameServerItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "companyItemOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "configNewGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameAllowed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "games",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameOnMarketStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "itemOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permission",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playingOnServer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestAffiliateGame",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestsToJoinGame",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "serverOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameTwoFactorAuth",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalParams",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermission",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissions",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "twoFactorAuthenticate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "twoFactorAuthenticated",
    values: [QGames.AuthenticationStruct, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "users", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptAffiliation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCompanyItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGameItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGameServers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGameStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkGameAffiliation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkGameOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkGameServerCompanyItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkGameServerItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "companyItemOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configNewGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameOnMarketStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permission", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playingOnServer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAffiliateGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestsToJoinGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "serverOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGameTwoFactorAuth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twoFactorAuthenticate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twoFactorAuthenticated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "Authenticate(address,uint256,tuple)": EventFragment;
    "Authenticated(address,uint256,uint256)": EventFragment;
    "CompanyItemsAdded(address,uint256,uint256[])": EventFragment;
    "GameFees(uint256,address,uint256[2])": EventFragment;
    "GameIsConfiguring(address,uint256)": EventFragment;
    "GameJoinAccepted(address,uint256,uint256)": EventFragment;
    "GameJoinRequest(address,uint256,uint256)": EventFragment;
    "GameStatusUpdate(address,uint256,bool)": EventFragment;
    "ItemsAdded(address,uint256,uint256[])": EventFragment;
    "NotAuthenticated(address,uint256,uint256)": EventFragment;
    "Permission(address,uint256,address,bool)": EventFragment;
    "Permissions(address,uint256,address[],bool[])": EventFragment;
    "ServersAdded(address,uint256,uint256[])": EventFragment;
    "TwoFactorAuthenticate(address,uint256,uint256,string)": EventFragment;
    "TwoFactorAuthenticated(address,uint256,uint256)": EventFragment;
    "TwoFactorNotAuthenticated(address,uint256,uint256)": EventFragment;
    "TwoFactorStatusUpdate(address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authenticate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Authenticated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompanyItemsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameIsConfiguring"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameJoinAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameJoinRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStatusUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NotAuthenticated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Permission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Permissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServersAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwoFactorAuthenticate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwoFactorAuthenticated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwoFactorNotAuthenticated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwoFactorStatusUpdate"): EventFragment;
}

export interface AuthenticateEventObject {
  user: string;
  id: BigNumber;
  authentication: QGames.AuthenticationStructOutput;
}
export type AuthenticateEvent = TypedEvent<
  [string, BigNumber, QGames.AuthenticationStructOutput],
  AuthenticateEventObject
>;

export type AuthenticateEventFilter = TypedEventFilter<AuthenticateEvent>;

export interface AuthenticatedEventObject {
  user: string;
  id: BigNumber;
  server: BigNumber;
}
export type AuthenticatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AuthenticatedEventObject
>;

export type AuthenticatedEventFilter = TypedEventFilter<AuthenticatedEvent>;

export interface CompanyItemsAddedEventObject {
  user: string;
  id: BigNumber;
  items: BigNumber[];
}
export type CompanyItemsAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  CompanyItemsAddedEventObject
>;

export type CompanyItemsAddedEventFilter =
  TypedEventFilter<CompanyItemsAddedEvent>;

export interface GameFeesEventObject {
  id: BigNumber;
  targets: string;
  fees: [BigNumber, BigNumber];
}
export type GameFeesEvent = TypedEvent<
  [BigNumber, string, [BigNumber, BigNumber]],
  GameFeesEventObject
>;

export type GameFeesEventFilter = TypedEventFilter<GameFeesEvent>;

export interface GameIsConfiguringEventObject {
  user: string;
  id: BigNumber;
}
export type GameIsConfiguringEvent = TypedEvent<
  [string, BigNumber],
  GameIsConfiguringEventObject
>;

export type GameIsConfiguringEventFilter =
  TypedEventFilter<GameIsConfiguringEvent>;

export interface GameJoinAcceptedEventObject {
  user: string;
  id: BigNumber;
  gameRequested: BigNumber;
}
export type GameJoinAcceptedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  GameJoinAcceptedEventObject
>;

export type GameJoinAcceptedEventFilter =
  TypedEventFilter<GameJoinAcceptedEvent>;

export interface GameJoinRequestEventObject {
  user: string;
  id: BigNumber;
  gameRequested: BigNumber;
}
export type GameJoinRequestEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  GameJoinRequestEventObject
>;

export type GameJoinRequestEventFilter = TypedEventFilter<GameJoinRequestEvent>;

export interface GameStatusUpdateEventObject {
  user: string;
  id: BigNumber;
  status: boolean;
}
export type GameStatusUpdateEvent = TypedEvent<
  [string, BigNumber, boolean],
  GameStatusUpdateEventObject
>;

export type GameStatusUpdateEventFilter =
  TypedEventFilter<GameStatusUpdateEvent>;

export interface ItemsAddedEventObject {
  user: string;
  id: BigNumber;
  items: BigNumber[];
}
export type ItemsAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  ItemsAddedEventObject
>;

export type ItemsAddedEventFilter = TypedEventFilter<ItemsAddedEvent>;

export interface NotAuthenticatedEventObject {
  user: string;
  id: BigNumber;
  server: BigNumber;
}
export type NotAuthenticatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NotAuthenticatedEventObject
>;

export type NotAuthenticatedEventFilter =
  TypedEventFilter<NotAuthenticatedEvent>;

export interface PermissionEventObject {
  user: string;
  id: BigNumber;
  target: string;
  permission: boolean;
}
export type PermissionEvent = TypedEvent<
  [string, BigNumber, string, boolean],
  PermissionEventObject
>;

export type PermissionEventFilter = TypedEventFilter<PermissionEvent>;

export interface PermissionsEventObject {
  user: string;
  id: BigNumber;
  targets: string[];
  permissions: boolean[];
}
export type PermissionsEvent = TypedEvent<
  [string, BigNumber, string[], boolean[]],
  PermissionsEventObject
>;

export type PermissionsEventFilter = TypedEventFilter<PermissionsEvent>;

export interface ServersAddedEventObject {
  user: string;
  id: BigNumber;
  servers: BigNumber[];
}
export type ServersAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  ServersAddedEventObject
>;

export type ServersAddedEventFilter = TypedEventFilter<ServersAddedEvent>;

export interface TwoFactorAuthenticateEventObject {
  user: string;
  id: BigNumber;
  server: BigNumber;
  temporaryPassword: string;
}
export type TwoFactorAuthenticateEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  TwoFactorAuthenticateEventObject
>;

export type TwoFactorAuthenticateEventFilter =
  TypedEventFilter<TwoFactorAuthenticateEvent>;

export interface TwoFactorAuthenticatedEventObject {
  user: string;
  id: BigNumber;
  server: BigNumber;
}
export type TwoFactorAuthenticatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TwoFactorAuthenticatedEventObject
>;

export type TwoFactorAuthenticatedEventFilter =
  TypedEventFilter<TwoFactorAuthenticatedEvent>;

export interface TwoFactorNotAuthenticatedEventObject {
  user: string;
  id: BigNumber;
  server: BigNumber;
}
export type TwoFactorNotAuthenticatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TwoFactorNotAuthenticatedEventObject
>;

export type TwoFactorNotAuthenticatedEventFilter =
  TypedEventFilter<TwoFactorNotAuthenticatedEvent>;

export interface TwoFactorStatusUpdateEventObject {
  user: string;
  id: BigNumber;
  status: boolean;
}
export type TwoFactorStatusUpdateEvent = TypedEvent<
  [string, BigNumber, boolean],
  TwoFactorStatusUpdateEventObject
>;

export type TwoFactorStatusUpdateEventFilter =
  TypedEventFilter<TwoFactorStatusUpdateEvent>;

export interface QGames extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QGamesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptAffiliation(
      game: PromiseOrValue<BigNumberish>,
      targetGame: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addCompanyItems(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addGameItems(
      game: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addGameServers(
      game: PromiseOrValue<BigNumberish>,
      servers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authenticate(
      authentication: QGames.AuthenticationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authenticated(
      authentication: QGames.AuthenticationStruct,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeGameStatus(
      game: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkCompany(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkGameAffiliation(
      gameFrom: PromiseOrValue<BigNumberish>,
      gameTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkGameOwner(
      gameOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkGameServerCompanyItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkGameServerItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkUser(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    companyItemOf(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    configNewGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gameAllowed(
      game: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean] & {
        owner: string;
        readyForTransaction: boolean;
        twoFactorAuth: boolean;
      }
    >;

    getFees(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    getGameOnMarketStatus(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getGameOwner(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    itemOf(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permission(
      game: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    playingOnServer(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requestAffiliateGame(
      game: PromiseOrValue<BigNumberish>,
      targetGame: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestsToJoinGame(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    serverOf(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFees(
      game: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      theFees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGameTwoFactorAuth(
      game: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPermission(
      game: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPermissions(
      game: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<string>[],
      permissions: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    twoFactorAuthenticate(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      temporaryPassword: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    twoFactorAuthenticated(
      authentication: QGames.AuthenticationStruct,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    users(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptAffiliation(
    game: PromiseOrValue<BigNumberish>,
    targetGame: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addCompanyItems(
    game: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addGameItems(
    game: PromiseOrValue<BigNumberish>,
    items: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addGameServers(
    game: PromiseOrValue<BigNumberish>,
    servers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authenticate(
    authentication: QGames.AuthenticationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authenticated(
    authentication: QGames.AuthenticationStruct,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeGameStatus(
    game: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkCompany(
    user: PromiseOrValue<string>,
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkGameAffiliation(
    gameFrom: PromiseOrValue<BigNumberish>,
    gameTo: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkGameOwner(
    gameOwner: PromiseOrValue<string>,
    game: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkGameServerCompanyItem(
    user: PromiseOrValue<string>,
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkGameServerItem(
    user: PromiseOrValue<string>,
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkUser(
    user: PromiseOrValue<string>,
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  companyItemOf(
    game: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  configNewGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gameAllowed(
    game: PromiseOrValue<BigNumberish>,
    allowed: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  games(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, boolean] & {
      owner: string;
      readyForTransaction: boolean;
      twoFactorAuth: boolean;
    }
  >;

  getFees(
    game: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getGameOnMarketStatus(
    game: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getGameOwner(
    game: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  itemOf(
    game: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  permission(
    game: PromiseOrValue<BigNumberish>,
    allowed: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  playingOnServer(
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  requestAffiliateGame(
    game: PromiseOrValue<BigNumberish>,
    targetGame: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestsToJoinGame(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  serverOf(
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFees(
    game: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    theFees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGameTwoFactorAuth(
    game: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlobalParams(
    busers: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPermission(
    game: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPermissions(
    game: PromiseOrValue<BigNumberish>,
    targets: PromiseOrValue<string>[],
    permissions: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  twoFactorAuthenticate(
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    temporaryPassword: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  twoFactorAuthenticated(
    authentication: QGames.AuthenticationStruct,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  users(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptAffiliation(
      game: PromiseOrValue<BigNumberish>,
      targetGame: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addCompanyItems(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addGameItems(
      game: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addGameServers(
      game: PromiseOrValue<BigNumberish>,
      servers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    authenticate(
      authentication: QGames.AuthenticationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    authenticated(
      authentication: QGames.AuthenticationStruct,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeGameStatus(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkCompany(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkGameAffiliation(
      gameFrom: PromiseOrValue<BigNumberish>,
      gameTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkGameOwner(
      gameOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkGameServerCompanyItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkGameServerItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkUser(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    companyItemOf(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configNewGame(overrides?: CallOverrides): Promise<void>;

    gameAllowed(
      game: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean] & {
        owner: string;
        readyForTransaction: boolean;
        twoFactorAuth: boolean;
      }
    >;

    getFees(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getGameOnMarketStatus(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getGameOwner(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    itemOf(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    permission(
      game: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    playingOnServer(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestAffiliateGame(
      game: PromiseOrValue<BigNumberish>,
      targetGame: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestsToJoinGame(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    serverOf(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFees(
      game: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      theFees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<void>;

    setGameTwoFactorAuth(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermission(
      game: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissions(
      game: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<string>[],
      permissions: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    twoFactorAuthenticate(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      temporaryPassword: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    twoFactorAuthenticated(
      authentication: QGames.AuthenticationStruct,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    users(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Authenticate(address,uint256,tuple)"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      authentication?: null
    ): AuthenticateEventFilter;
    Authenticate(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      authentication?: null
    ): AuthenticateEventFilter;

    "Authenticated(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      server?: null
    ): AuthenticatedEventFilter;
    Authenticated(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      server?: null
    ): AuthenticatedEventFilter;

    "CompanyItemsAdded(address,uint256,uint256[])"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      items?: null
    ): CompanyItemsAddedEventFilter;
    CompanyItemsAdded(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      items?: null
    ): CompanyItemsAddedEventFilter;

    "GameFees(uint256,address,uint256[2])"(
      id?: PromiseOrValue<BigNumberish> | null,
      targets?: null,
      fees?: null
    ): GameFeesEventFilter;
    GameFees(
      id?: PromiseOrValue<BigNumberish> | null,
      targets?: null,
      fees?: null
    ): GameFeesEventFilter;

    "GameIsConfiguring(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      id?: null
    ): GameIsConfiguringEventFilter;
    GameIsConfiguring(
      user?: PromiseOrValue<string> | null,
      id?: null
    ): GameIsConfiguringEventFilter;

    "GameJoinAccepted(address,uint256,uint256)"(
      user?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      gameRequested?: PromiseOrValue<BigNumberish> | null
    ): GameJoinAcceptedEventFilter;
    GameJoinAccepted(
      user?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      gameRequested?: PromiseOrValue<BigNumberish> | null
    ): GameJoinAcceptedEventFilter;

    "GameJoinRequest(address,uint256,uint256)"(
      user?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      gameRequested?: PromiseOrValue<BigNumberish> | null
    ): GameJoinRequestEventFilter;
    GameJoinRequest(
      user?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      gameRequested?: PromiseOrValue<BigNumberish> | null
    ): GameJoinRequestEventFilter;

    "GameStatusUpdate(address,uint256,bool)"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: PromiseOrValue<boolean> | null
    ): GameStatusUpdateEventFilter;
    GameStatusUpdate(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: PromiseOrValue<boolean> | null
    ): GameStatusUpdateEventFilter;

    "ItemsAdded(address,uint256,uint256[])"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      items?: null
    ): ItemsAddedEventFilter;
    ItemsAdded(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      items?: null
    ): ItemsAddedEventFilter;

    "NotAuthenticated(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      server?: null
    ): NotAuthenticatedEventFilter;
    NotAuthenticated(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      server?: null
    ): NotAuthenticatedEventFilter;

    "Permission(address,uint256,address,bool)"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      target?: null,
      permission?: null
    ): PermissionEventFilter;
    Permission(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      target?: null,
      permission?: null
    ): PermissionEventFilter;

    "Permissions(address,uint256,address[],bool[])"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      targets?: null,
      permissions?: null
    ): PermissionsEventFilter;
    Permissions(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      targets?: null,
      permissions?: null
    ): PermissionsEventFilter;

    "ServersAdded(address,uint256,uint256[])"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      servers?: null
    ): ServersAddedEventFilter;
    ServersAdded(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      servers?: null
    ): ServersAddedEventFilter;

    "TwoFactorAuthenticate(address,uint256,uint256,string)"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      temporaryPassword?: null
    ): TwoFactorAuthenticateEventFilter;
    TwoFactorAuthenticate(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      temporaryPassword?: null
    ): TwoFactorAuthenticateEventFilter;

    "TwoFactorAuthenticated(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      server?: null
    ): TwoFactorAuthenticatedEventFilter;
    TwoFactorAuthenticated(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      server?: null
    ): TwoFactorAuthenticatedEventFilter;

    "TwoFactorNotAuthenticated(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      server?: null
    ): TwoFactorNotAuthenticatedEventFilter;
    TwoFactorNotAuthenticated(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      server?: null
    ): TwoFactorNotAuthenticatedEventFilter;

    "TwoFactorStatusUpdate(address,uint256,bool)"(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: PromiseOrValue<boolean> | null
    ): TwoFactorStatusUpdateEventFilter;
    TwoFactorStatusUpdate(
      user?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      status?: PromiseOrValue<boolean> | null
    ): TwoFactorStatusUpdateEventFilter;
  };

  estimateGas: {
    acceptAffiliation(
      game: PromiseOrValue<BigNumberish>,
      targetGame: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addCompanyItems(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addGameItems(
      game: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addGameServers(
      game: PromiseOrValue<BigNumberish>,
      servers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authenticate(
      authentication: QGames.AuthenticationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authenticated(
      authentication: QGames.AuthenticationStruct,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeGameStatus(
      game: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkCompany(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkGameAffiliation(
      gameFrom: PromiseOrValue<BigNumberish>,
      gameTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkGameOwner(
      gameOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkGameServerCompanyItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkGameServerItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUser(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    companyItemOf(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configNewGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gameAllowed(
      game: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFees(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameOnMarketStatus(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameOwner(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    itemOf(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permission(
      game: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playingOnServer(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestAffiliateGame(
      game: PromiseOrValue<BigNumberish>,
      targetGame: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestsToJoinGame(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    serverOf(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFees(
      game: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      theFees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGameTwoFactorAuth(
      game: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPermission(
      game: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPermissions(
      game: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<string>[],
      permissions: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    twoFactorAuthenticate(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      temporaryPassword: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    twoFactorAuthenticated(
      authentication: QGames.AuthenticationStruct,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    users(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAffiliation(
      game: PromiseOrValue<BigNumberish>,
      targetGame: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addCompanyItems(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addGameItems(
      game: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addGameServers(
      game: PromiseOrValue<BigNumberish>,
      servers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authenticate(
      authentication: QGames.AuthenticationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authenticated(
      authentication: QGames.AuthenticationStruct,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeGameStatus(
      game: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkCompany(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkGameAffiliation(
      gameFrom: PromiseOrValue<BigNumberish>,
      gameTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkGameOwner(
      gameOwner: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkGameServerCompanyItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkGameServerItem(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUser(
      user: PromiseOrValue<string>,
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    companyItemOf(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configNewGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gameAllowed(
      game: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFees(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameOnMarketStatus(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameOwner(
      game: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itemOf(
      game: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permission(
      game: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playingOnServer(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestAffiliateGame(
      game: PromiseOrValue<BigNumberish>,
      targetGame: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestsToJoinGame(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    serverOf(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFees(
      game: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      theFees: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGameTwoFactorAuth(
      game: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPermission(
      game: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPermissions(
      game: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<string>[],
      permissions: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    twoFactorAuthenticate(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      temporaryPassword: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    twoFactorAuthenticated(
      authentication: QGames.AuthenticationStruct,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    users(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
