/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface BMarketTakeItemHandlerInterface extends utils.Interface {
  functions: {};

  events: {
    "ItemNotTaken(address,uint256,uint256)": EventFragment;
    "ItemTaken(address,uint256,uint256,uint256,uint256)": EventFragment;
    "TakeItem(address,uint256,uint256,uint256,uint256,uint256[2])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemNotTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeItem"): EventFragment;
}

export interface ItemNotTakenEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotTakenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotTakenEventObject
>;

export type ItemNotTakenEventFilter = TypedEventFilter<ItemNotTakenEvent>;

export interface ItemTakenEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ItemTakenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemTakenEventObject
>;

export type ItemTakenEventFilter = TypedEventFilter<ItemTakenEvent>;

export interface TakeItemEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
  metadata: [BigNumber, BigNumber];
}
export type TakeItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, [BigNumber, BigNumber]],
  TakeItemEventObject
>;

export type TakeItemEventFilter = TypedEventFilter<TakeItemEvent>;

export interface BMarketTakeItemHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BMarketTakeItemHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ItemNotTaken(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenEventFilter;
    ItemNotTaken(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenEventFilter;

    "ItemTaken(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenEventFilter;
    ItemTaken(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenEventFilter;

    "TakeItem(address,uint256,uint256,uint256,uint256,uint256[2])"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      metadata?: null
    ): TakeItemEventFilter;
    TakeItem(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      metadata?: null
    ): TakeItemEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
