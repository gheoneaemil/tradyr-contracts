/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface AUCTIONSCOMPANYInterface extends utils.Interface {
  functions: {
    "auctions(uint256)": FunctionFragment;
    "cancelAuctions(uint256[])": FunctionFragment;
    "createAuctions(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "finishAuction(uint256)": FunctionFragment;
    "finishedAuction(uint256,bool)": FunctionFragment;
    "games()": FunctionFragment;
    "id()": FunctionFragment;
    "owner()": FunctionFragment;
    "payForAuction(uint256,uint256)": FunctionFragment;
    "setGlobalParams(address,address)": FunctionFragment;
    "users()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctions"
      | "cancelAuctions"
      | "createAuctions"
      | "finishAuction"
      | "finishedAuction"
      | "games"
      | "id"
      | "owner"
      | "payForAuction"
      | "setGlobalParams"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuctions",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuctions",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finishAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finishedAuction",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "games", values?: undefined): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payForAuction",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalParams",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "users", values?: undefined): string;

  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishedAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payForAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "CompanyAuctionsCancelled(address,uint256,uint256[])": EventFragment;
    "CompanyAuctionsCreated(address,uint256,uint256,uint256,uint256[4])": EventFragment;
    "GiveItem(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemGiven(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemNotGiven(address,uint256,uint256)": EventFragment;
    "NewHighPayer(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CompanyAuctionsCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompanyAuctionsCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GiveItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemGiven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotGiven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHighPayer"): EventFragment;
}

export interface CompanyAuctionsCancelledEventObject {
  user: string;
  game: BigNumber;
  ids: BigNumber[];
}
export type CompanyAuctionsCancelledEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  CompanyAuctionsCancelledEventObject
>;

export type CompanyAuctionsCancelledEventFilter =
  TypedEventFilter<CompanyAuctionsCancelledEvent>;

export interface CompanyAuctionsCreatedEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  metadata: [BigNumber, BigNumber, BigNumber, BigNumber];
}
export type CompanyAuctionsCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber]
  ],
  CompanyAuctionsCreatedEventObject
>;

export type CompanyAuctionsCreatedEventFilter =
  TypedEventFilter<CompanyAuctionsCreatedEvent>;

export interface GiveItemEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type GiveItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  GiveItemEventObject
>;

export type GiveItemEventFilter = TypedEventFilter<GiveItemEvent>;

export interface ItemGivenEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ItemGivenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemGivenEventObject
>;

export type ItemGivenEventFilter = TypedEventFilter<ItemGivenEvent>;

export interface ItemNotGivenEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotGivenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotGivenEventObject
>;

export type ItemNotGivenEventFilter = TypedEventFilter<ItemNotGivenEvent>;

export interface NewHighPayerEventObject {
  user: string;
  price: BigNumber;
  id: BigNumber;
}
export type NewHighPayerEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewHighPayerEventObject
>;

export type NewHighPayerEventFilter = TypedEventFilter<NewHighPayerEvent>;

export interface AUCTIONSCOMPANY extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AUCTIONSCOMPANYInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        owner: string;
        winner: string;
        game: BigNumber;
        item: BigNumber;
        price: BigNumber;
        toAdd: BigNumber;
        server: BigNumber;
        status: number;
      }
    >;

    cancelAuctions(
      _auctions: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAuctions(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      toAdd: PromiseOrValue<BigNumberish>,
      qty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finishAuction(
      auction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finishedAuction(
      auction: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    games(overrides?: CallOverrides): Promise<[string]>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payForAuction(
      auction: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    users(overrides?: CallOverrides): Promise<[string]>;
  };

  auctions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      owner: string;
      winner: string;
      game: BigNumber;
      item: BigNumber;
      price: BigNumber;
      toAdd: BigNumber;
      server: BigNumber;
      status: number;
    }
  >;

  cancelAuctions(
    _auctions: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAuctions(
    game: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    toAdd: PromiseOrValue<BigNumberish>,
    qty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finishAuction(
    auction: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finishedAuction(
    auction: PromiseOrValue<BigNumberish>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  games(overrides?: CallOverrides): Promise<string>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  payForAuction(
    auction: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlobalParams(
    busers: PromiseOrValue<string>,
    bgames: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  users(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        owner: string;
        winner: string;
        game: BigNumber;
        item: BigNumber;
        price: BigNumber;
        toAdd: BigNumber;
        server: BigNumber;
        status: number;
      }
    >;

    cancelAuctions(
      _auctions: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createAuctions(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      toAdd: PromiseOrValue<BigNumberish>,
      qty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finishAuction(
      auction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finishedAuction(
      auction: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    games(overrides?: CallOverrides): Promise<string>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payForAuction(
      auction: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    users(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CompanyAuctionsCancelled(address,uint256,uint256[])"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      ids?: null
    ): CompanyAuctionsCancelledEventFilter;
    CompanyAuctionsCancelled(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      ids?: null
    ): CompanyAuctionsCancelledEventFilter;

    "CompanyAuctionsCreated(address,uint256,uint256,uint256,uint256[4])"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      metadata?: null
    ): CompanyAuctionsCreatedEventFilter;
    CompanyAuctionsCreated(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      metadata?: null
    ): CompanyAuctionsCreatedEventFilter;

    "GiveItem(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): GiveItemEventFilter;
    GiveItem(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): GiveItemEventFilter;

    "ItemGiven(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemGivenEventFilter;
    ItemGiven(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemGivenEventFilter;

    "ItemNotGiven(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotGivenEventFilter;
    ItemNotGiven(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotGivenEventFilter;

    "NewHighPayer(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      price?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): NewHighPayerEventFilter;
    NewHighPayer(
      user?: PromiseOrValue<string> | null,
      price?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): NewHighPayerEventFilter;
  };

  estimateGas: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAuctions(
      _auctions: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAuctions(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      toAdd: PromiseOrValue<BigNumberish>,
      qty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finishAuction(
      auction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finishedAuction(
      auction: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    games(overrides?: CallOverrides): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payForAuction(
      auction: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    users(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAuctions(
      _auctions: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAuctions(
      game: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      toAdd: PromiseOrValue<BigNumberish>,
      qty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finishAuction(
      auction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finishedAuction(
      auction: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    games(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payForAuction(
      auction: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    users(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
