/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface QLotteriesInterface extends utils.Interface {
  functions: {
    "addLotteryPlayer(uint256)": FunctionFragment;
    "addLotteryPlayerValidation(uint256,address,bool)": FunctionFragment;
    "cancelLottery(uint256)": FunctionFragment;
    "cancelledLottery(uint256,bool)": FunctionFragment;
    "companyLotteryValidation(uint256,bool)": FunctionFragment;
    "createLottery(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "finishLottery(uint256)": FunctionFragment;
    "finishedLottery(uint256,bool)": FunctionFragment;
    "games()": FunctionFragment;
    "id()": FunctionFragment;
    "lotteries(uint256)": FunctionFragment;
    "lotteryPlayers(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "setGlobalParams(address,address)": FunctionFragment;
    "users()": FunctionFragment;
    "verifyPlayer(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLotteryPlayer"
      | "addLotteryPlayerValidation"
      | "cancelLottery"
      | "cancelledLottery"
      | "companyLotteryValidation"
      | "createLottery"
      | "finishLottery"
      | "finishedLottery"
      | "games"
      | "id"
      | "lotteries"
      | "lotteryPlayers"
      | "owner"
      | "setGlobalParams"
      | "users"
      | "verifyPlayer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLotteryPlayer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addLotteryPlayerValidation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLottery",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledLottery",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "companyLotteryValidation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLottery",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finishLottery",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finishedLottery",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "games", values?: undefined): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lotteries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryPlayers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGlobalParams",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "users", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyPlayer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLotteryPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLotteryPlayerValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelledLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companyLotteryValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishedLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lotteries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lotteryPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyPlayer",
    data: BytesLike
  ): Result;

  events: {
    "AddPlayer(address,uint256,uint256,uint256,uint256)": EventFragment;
    "CompanyLotteryCreated(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "GiveItem(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemGiven(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemNotGiven(address,uint256,uint256)": EventFragment;
    "ItemNotRefunded(address,uint256,uint256)": EventFragment;
    "ItemNotTaken(address,uint256,uint256)": EventFragment;
    "ItemRefunded(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemTaken(address,uint256,uint256,uint256,uint256)": EventFragment;
    "PlayerAdded(address,uint256,uint256,uint256,uint256)": EventFragment;
    "PlayerNotAdded(address,uint256,uint256)": EventFragment;
    "RefundItem(address,uint256,uint256,uint256,uint256)": EventFragment;
    "TakeItem(address,uint256,uint256,uint256,uint256,uint256[2])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPlayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompanyLotteryCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GiveItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemGiven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotGiven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemNotTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerNotAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeItem"): EventFragment;
}

export interface AddPlayerEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type AddPlayerEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  AddPlayerEventObject
>;

export type AddPlayerEventFilter = TypedEventFilter<AddPlayerEvent>;

export interface CompanyLotteryCreatedEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
  tax: BigNumber;
  totalMoney: BigNumber;
}
export type CompanyLotteryCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  CompanyLotteryCreatedEventObject
>;

export type CompanyLotteryCreatedEventFilter =
  TypedEventFilter<CompanyLotteryCreatedEvent>;

export interface GiveItemEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type GiveItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  GiveItemEventObject
>;

export type GiveItemEventFilter = TypedEventFilter<GiveItemEvent>;

export interface ItemGivenEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ItemGivenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemGivenEventObject
>;

export type ItemGivenEventFilter = TypedEventFilter<ItemGivenEvent>;

export interface ItemNotGivenEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotGivenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotGivenEventObject
>;

export type ItemNotGivenEventFilter = TypedEventFilter<ItemNotGivenEvent>;

export interface ItemNotRefundedEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotRefundedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotRefundedEventObject
>;

export type ItemNotRefundedEventFilter = TypedEventFilter<ItemNotRefundedEvent>;

export interface ItemNotTakenEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type ItemNotTakenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemNotTakenEventObject
>;

export type ItemNotTakenEventFilter = TypedEventFilter<ItemNotTakenEvent>;

export interface ItemRefundedEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ItemRefundedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemRefundedEventObject
>;

export type ItemRefundedEventFilter = TypedEventFilter<ItemRefundedEvent>;

export interface ItemTakenEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type ItemTakenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ItemTakenEventObject
>;

export type ItemTakenEventFilter = TypedEventFilter<ItemTakenEvent>;

export interface PlayerAddedEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type PlayerAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  PlayerAddedEventObject
>;

export type PlayerAddedEventFilter = TypedEventFilter<PlayerAddedEvent>;

export interface PlayerNotAddedEventObject {
  user: string;
  game: BigNumber;
  id: BigNumber;
}
export type PlayerNotAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PlayerNotAddedEventObject
>;

export type PlayerNotAddedEventFilter = TypedEventFilter<PlayerNotAddedEvent>;

export interface RefundItemEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
}
export type RefundItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RefundItemEventObject
>;

export type RefundItemEventFilter = TypedEventFilter<RefundItemEvent>;

export interface TakeItemEventObject {
  user: string;
  game: BigNumber;
  server: BigNumber;
  item: BigNumber;
  id: BigNumber;
  metadata: [BigNumber, BigNumber];
}
export type TakeItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, [BigNumber, BigNumber]],
  TakeItemEventObject
>;

export type TakeItemEventFilter = TypedEventFilter<TakeItemEvent>;

export interface QLotteries extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QLotteriesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLotteryPlayer(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLotteryPlayerValidation(
      lottery: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelLottery(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelledLottery(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    companyLotteryValidation(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createLottery(
      game: PromiseOrValue<BigNumberish>,
      tax: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      totalMoney: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finishLottery(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finishedLottery(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    games(overrides?: CallOverrides): Promise<[string]>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    lotteries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        owner: string;
        game: BigNumber;
        victoryNumber: BigNumber;
        totalMoney: BigNumber;
        currentMoney: BigNumber;
        tax: BigNumber;
        item: BigNumber;
        server: BigNumber;
        status: number;
      }
    >;

    lotteryPlayers(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    users(overrides?: CallOverrides): Promise<[string]>;

    verifyPlayer(
      lottery: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addLotteryPlayer(
    lottery: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLotteryPlayerValidation(
    lottery: PromiseOrValue<BigNumberish>,
    player: PromiseOrValue<string>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelLottery(
    lottery: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelledLottery(
    lottery: PromiseOrValue<BigNumberish>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  companyLotteryValidation(
    lottery: PromiseOrValue<BigNumberish>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createLottery(
    game: PromiseOrValue<BigNumberish>,
    tax: PromiseOrValue<BigNumberish>,
    server: PromiseOrValue<BigNumberish>,
    item: PromiseOrValue<BigNumberish>,
    totalMoney: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finishLottery(
    lottery: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finishedLottery(
    lottery: PromiseOrValue<BigNumberish>,
    companyValidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  games(overrides?: CallOverrides): Promise<string>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  lotteries(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      owner: string;
      game: BigNumber;
      victoryNumber: BigNumber;
      totalMoney: BigNumber;
      currentMoney: BigNumber;
      tax: BigNumber;
      item: BigNumber;
      server: BigNumber;
      status: number;
    }
  >;

  lotteryPlayers(
    lottery: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  setGlobalParams(
    busers: PromiseOrValue<string>,
    bgames: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  users(overrides?: CallOverrides): Promise<string>;

  verifyPlayer(
    lottery: PromiseOrValue<BigNumberish>,
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addLotteryPlayer(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addLotteryPlayerValidation(
      lottery: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelLottery(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelledLottery(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    companyLotteryValidation(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createLottery(
      game: PromiseOrValue<BigNumberish>,
      tax: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      totalMoney: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finishLottery(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finishedLottery(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    games(overrides?: CallOverrides): Promise<string>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    lotteries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        owner: string;
        game: BigNumber;
        victoryNumber: BigNumber;
        totalMoney: BigNumber;
        currentMoney: BigNumber;
        tax: BigNumber;
        item: BigNumber;
        server: BigNumber;
        status: number;
      }
    >;

    lotteryPlayers(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    users(overrides?: CallOverrides): Promise<string>;

    verifyPlayer(
      lottery: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AddPlayer(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): AddPlayerEventFilter;
    AddPlayer(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): AddPlayerEventFilter;

    "CompanyLotteryCreated(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      tax?: null,
      totalMoney?: null
    ): CompanyLotteryCreatedEventFilter;
    CompanyLotteryCreated(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      tax?: null,
      totalMoney?: null
    ): CompanyLotteryCreatedEventFilter;

    "GiveItem(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): GiveItemEventFilter;
    GiveItem(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): GiveItemEventFilter;

    "ItemGiven(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemGivenEventFilter;
    ItemGiven(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemGivenEventFilter;

    "ItemNotGiven(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotGivenEventFilter;
    ItemNotGiven(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotGivenEventFilter;

    "ItemNotRefunded(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotRefundedEventFilter;
    ItemNotRefunded(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotRefundedEventFilter;

    "ItemNotTaken(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenEventFilter;
    ItemNotTaken(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemNotTakenEventFilter;

    "ItemRefunded(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemRefundedEventFilter;
    ItemRefunded(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemRefundedEventFilter;

    "ItemTaken(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenEventFilter;
    ItemTaken(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ItemTakenEventFilter;

    "PlayerAdded(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): PlayerAddedEventFilter;
    PlayerAdded(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): PlayerAddedEventFilter;

    "PlayerNotAdded(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): PlayerNotAddedEventFilter;
    PlayerNotAdded(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): PlayerNotAddedEventFilter;

    "RefundItem(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): RefundItemEventFilter;
    RefundItem(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): RefundItemEventFilter;

    "TakeItem(address,uint256,uint256,uint256,uint256,uint256[2])"(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      metadata?: null
    ): TakeItemEventFilter;
    TakeItem(
      user?: PromiseOrValue<string> | null,
      game?: PromiseOrValue<BigNumberish> | null,
      server?: null,
      item?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      metadata?: null
    ): TakeItemEventFilter;
  };

  estimateGas: {
    addLotteryPlayer(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLotteryPlayerValidation(
      lottery: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelLottery(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelledLottery(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    companyLotteryValidation(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createLottery(
      game: PromiseOrValue<BigNumberish>,
      tax: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      totalMoney: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finishLottery(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finishedLottery(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    games(overrides?: CallOverrides): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    lotteries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lotteryPlayers(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    users(overrides?: CallOverrides): Promise<BigNumber>;

    verifyPlayer(
      lottery: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLotteryPlayer(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLotteryPlayerValidation(
      lottery: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelLottery(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelledLottery(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    companyLotteryValidation(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createLottery(
      game: PromiseOrValue<BigNumberish>,
      tax: PromiseOrValue<BigNumberish>,
      server: PromiseOrValue<BigNumberish>,
      item: PromiseOrValue<BigNumberish>,
      totalMoney: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finishLottery(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finishedLottery(
      lottery: PromiseOrValue<BigNumberish>,
      companyValidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    games(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotteries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryPlayers(
      lottery: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGlobalParams(
      busers: PromiseOrValue<string>,
      bgames: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    users(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyPlayer(
      lottery: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
