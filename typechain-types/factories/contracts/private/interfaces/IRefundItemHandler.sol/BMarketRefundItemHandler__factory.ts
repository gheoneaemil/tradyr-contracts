/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  BMarketRefundItemHandler,
  BMarketRefundItemHandlerInterface,
} from "../../../../../contracts/private/interfaces/IRefundItemHandler.sol/BMarketRefundItemHandler";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "game",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ItemNotRefunded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "game",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "server",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "item",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ItemRefunded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "game",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "server",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "item",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "RefundItem",
    type: "event",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220330a97246d548ba9906c7c4df37fe49da21e4b680a3b224c4a204026fe21845764736f6c63430008110033";

type BMarketRefundItemHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BMarketRefundItemHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BMarketRefundItemHandler__factory extends ContractFactory {
  constructor(...args: BMarketRefundItemHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BMarketRefundItemHandler> {
    return super.deploy(overrides || {}) as Promise<BMarketRefundItemHandler>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BMarketRefundItemHandler {
    return super.attach(address) as BMarketRefundItemHandler;
  }
  override connect(signer: Signer): BMarketRefundItemHandler__factory {
    return super.connect(signer) as BMarketRefundItemHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BMarketRefundItemHandlerInterface {
    return new utils.Interface(_abi) as BMarketRefundItemHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BMarketRefundItemHandler {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BMarketRefundItemHandler;
  }
}
