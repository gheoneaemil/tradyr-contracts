/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokensHandler,
  TokensHandlerInterface,
} from "../../../contracts/plugins/TokensHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "nftAddressArray",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "nftTokenIdArray",
        type: "uint256[]",
      },
      {
        internalType: "uint32[]",
        name: "nftTokenTypeArray",
        type: "uint32[]",
      },
    ],
    name: "checkItemsApproval",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
    ],
    name: "checkTokensApproval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "nftAddresses",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "nftIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "nftAmounts",
        type: "uint256[]",
      },
      {
        internalType: "uint32[]",
        name: "nftTypes",
        type: "uint32[]",
      },
    ],
    name: "transferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506108f8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a125ea0414610046578063bb9a581a1461005b578063bdd3dc8e1461006e575b600080fd5b61005961005436600461068c565b610093565b005b610059610069366004610727565b610237565b61008161007c3660046107f4565b610441565b60405190815260200160405180910390f35b60005b8351811015610230578181815181106100b1576100b161082d565b602002602001015163ffffffff1660000361018957306001600160a01b03168482815181106100e2576100e261082d565b60200260200101516001600160a01b031663081812fc85848151811061010a5761010a61082d565b60200260200101516040518263ffffffff1660e01b815260040161013091815260200190565b602060405180830381865afa15801561014d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101719190610843565b6001600160a01b03161461018457600080fd5b610220565b83818151811061019b5761019b61082d565b602090810291909101015160405163e985e9c560e01b81526001600160a01b0387811660048301523060248301529091169063e985e9c590604401602060405180830381865afa1580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102179190610860565b61022057600080fd5b61022981610882565b9050610096565b5050505050565b83518351811480156102495750808251145b61025257600080fd5b60005b818110156104375782818151811061026f5761026f61082d565b602002602001015163ffffffff16600003610337578581815181106102965761029661082d565b60200260200101516001600160a01b03166342842e0e89898885815181106102c0576102c061082d565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561031a57600080fd5b505af115801561032e573d6000803e3d6000fd5b50505050610427565b8581815181106103495761034961082d565b60200260200101516001600160a01b031663f242432a89898885815181106103735761037361082d565b602002602001015188868151811061038d5761038d61082d565b60200260200101516040518563ffffffff1660e01b81526004016103f494939291906001600160a01b0394851681529290931660208301526040820152606081019190915260a060808201819052600490820152630307830360e41b60c082015260e00190565b600060405180830381600087803b15801561040e57600080fd5b505af1158015610422573d6000803e3d6000fd5b505050505b61043081610882565b9050610255565b5050505050505050565b604051636eb1769f60e11b81526001600160a01b0383811660048301523060248301526000919083169063dd62ed3e90604401602060405180830381865afa158015610491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b591906108a9565b9392505050565b6001600160a01b03811681146104d157600080fd5b50565b80356104df816104bc565b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610523576105236104e4565b604052919050565b600067ffffffffffffffff821115610545576105456104e4565b5060051b60200190565b600082601f83011261056057600080fd5b813560206105756105708361052b565b6104fa565b82815260059290921b8401810191818101908684111561059457600080fd5b8286015b848110156105b85780356105ab816104bc565b8352918301918301610598565b509695505050505050565b600082601f8301126105d457600080fd5b813560206105e46105708361052b565b82815260059290921b8401810191818101908684111561060357600080fd5b8286015b848110156105b85780358352918301918301610607565b600082601f83011261062f57600080fd5b8135602061063f6105708361052b565b82815260059290921b8401810191818101908684111561065e57600080fd5b8286015b848110156105b857803563ffffffff8116811461067f5760008081fd5b8352918301918301610662565b600080600080608085870312156106a257600080fd5b84356106ad816104bc565b9350602085013567ffffffffffffffff808211156106ca57600080fd5b6106d68883890161054f565b945060408701359150808211156106ec57600080fd5b6106f8888389016105c3565b9350606087013591508082111561070e57600080fd5b5061071b8782880161061e565b91505092959194509250565b60008060008060008060c0878903121561074057600080fd5b610749876104d4565b9550610757602088016104d4565b9450604087013567ffffffffffffffff8082111561077457600080fd5b6107808a838b0161054f565b9550606089013591508082111561079657600080fd5b6107a28a838b016105c3565b945060808901359150808211156107b857600080fd5b6107c48a838b016105c3565b935060a08901359150808211156107da57600080fd5b506107e789828a0161061e565b9150509295509295509295565b6000806040838503121561080757600080fd5b8235610812816104bc565b91506020830135610822816104bc565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561085557600080fd5b81516104b5816104bc565b60006020828403121561087257600080fd5b815180151581146104b557600080fd5b6000600182016108a257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156108bb57600080fd5b505191905056fea2646970667358221220b0571e41dd182b6f91a33e2e72974ea7da27dd5ebc2afb8538aac84e3a06722964736f6c63430008110033";

type TokensHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokensHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokensHandler__factory extends ContractFactory {
  constructor(...args: TokensHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokensHandler> {
    return super.deploy(overrides || {}) as Promise<TokensHandler>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokensHandler {
    return super.attach(address) as TokensHandler;
  }
  override connect(signer: Signer): TokensHandler__factory {
    return super.connect(signer) as TokensHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokensHandlerInterface {
    return new utils.Interface(_abi) as TokensHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokensHandler {
    return new Contract(address, _abi, signerOrProvider) as TokensHandler;
  }
}
